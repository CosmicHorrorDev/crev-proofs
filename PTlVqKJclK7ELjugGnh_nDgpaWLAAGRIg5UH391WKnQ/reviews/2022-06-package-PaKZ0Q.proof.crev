----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2022-06-11T01:20:42.101910400-05:00"
from:
  id-type: crev
  id: PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ
  url: "https://github.com/LovecraftianHorror/crev-proofs"
package:
  source: "https://crates.io"
  name: keyvalues-parser
  version: 0.1.0
  revision: ade0125b0e5b47d8e0ce1bb37d0bf4ffc07ce829
  digest: HtvLwPNZ1Ix6ZrrMw_KcE9eV0Y0klD_ipxB1qt2UEas
review:
  thoroughness: high
  understanding: high
  rating: positive
alternatives:
  - source: "https://crates.io"
    name: steamy-vdf
comment: |-
  Disclaimer, I'm the author
  
  This crate handles parsing Valve's Data Format (VDF or KeyValues) into an
  untyped structure. The parsing is backed by Pest without any real surprises
  (the complicated parts being mapping the returned parsed object to a rust
  structure. A bit annoying that this has to be done manually)
  
  Verification-wise there are several places that could panic, but there is a
  fuzzing suite to try and exercise code-paths that should be unreachable.
  
  The only reason that I'm opting for positive over strong is because I know
  that there are several VDF files that fail parsing (which should improve on
  the next release), and I'm not confident that there aren't more files that
  would also have issues since VDF doesn't really have a specification that is
  followed :(
----- SIGN CREV PROOF -----
6igbUOSV3DH6q0E-3MxnIiEHZqv8C7kbvR27Y4zbY-fU40oTMjTseOP_I8F5HnpXDZl14bgnvdL3_2qK0jtZCg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2022-06-11T01:37:07.068145515-05:00"
from:
  id-type: crev
  id: PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ
  url: "https://github.com/LovecraftianHorror/crev-proofs"
package:
  source: "https://crates.io"
  name: opaque-debug
  version: 0.2.3
  revision: 4a9addbcf6e494a187b77ca537849bdf6a1e8134
  digest: 6PvBSwVB7Ade-q0oN9PvGkzlQhv4xdlGL-FEXCPt-D4
review:
  thoroughness: high
  understanding: high
  rating: strong
comment: |-
  Intended for cases where you want a debug format that formats a struct as
  `StructName { ... }` to prevent leaking internal state, and it seems to do
  exactly that.
----- SIGN CREV PROOF -----
exWM6ubWLYnd8AjwbjhSO0gUqrnBjmn0ZRR7L7-TwZlGYyoTyE-fJPsq-xIn7QdJ06QqfiCXO47Rmf6_pmtLCA
----- END CREV PROOF -----

