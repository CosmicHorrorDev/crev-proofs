----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: 2023-02-10T17:31:17.990816304-07:00
from:
  id-type: crev
  id: PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ
  url: https://github.com/LovecraftianHorror/crev-proofs
package:
  source: https://crates.io
  name: bloomfilter
  version: 1.0.9
  revision: 02c9e51743f70d7400d7cd3a810875781f3c73d4
  digest: DoO_2ANdNjy15pYruY3tQLkbbq7iSeOUT8ltgzBdsv8
review:
  thoroughness: high
  understanding: medium
  rating: positive
alternatives:
- source: https://crates.io
  name: bloom
comment: |-
  A simple and straightforward bloomfilter implementation
  
  There could be better documentation (many places can panic without documenting
  as such), better tests, more focus on avoiding overflows, and being less panic
  happy on errors, but aside from that everything seems good
  
  There do seem to be issues with The ability to overflow the bitmap bit size in
  `Bloom::new_with_seed`, possible issues with a lot of casting between `u64`
  and `usize`, and finally issues with the possibility to serialize and
  deserialize the bloomfilter on computers that have different `usize` sizes.
  The worst that I think could happen would be changing which values are
  considered to be in the filter, but considering the common use would use a
  random seed for the hash which should make that pretty hard to exploit
----- SIGN CREV PROOF -----
-TWMnOscLWTN2N3z6exAIjD0VaHDoRryNnu1fzvDgfUQSmsqU_WNeUn68iyCmk4R9Rc2RpxrHIZfcsFloT_ACg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: 2023-02-13T14:53:15.938659459-07:00
from:
  id-type: crev
  id: PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ
  url: https://github.com/LovecraftianHorror/crev-proofs
package:
  source: https://crates.io
  name: lexopt
  version: 0.3.0
  revision: f75918d2f0cf6311b6e386fdd7549a8a07124d6a
  digest: Wy8WrVZxcttueJhErFz62NMt9PDp-bioaHocnEbT11M
review:
  thoroughness: medium
  understanding: medium
  rating: positive
alternatives:
- source: https://crates.io
  name: pico-args
comment: |-
  ## Fundamental
  
  * [x] Well maintained?
  * [x] Well documented?
    * Very solid comments in the source and includes a DESIGN.md file
  * [x] Sane dep tree?
    * No deps :)
  * [x] Good test coverage?
    * `cargo llvm-cov` reports 91.96% line coverage on Linux (there is a lot of
      conditional compilation to handle Windows WTF-8 hell)
  * [x] Tests are passing?
  * [x] `cargo audit` is happy?
  
  ## Nice to have
  
  * [x] `cargo check` is happy?
  * [x] `rustfmt` is happy?
  * [x] `clippy` is happy?
    * Happy on 1.67.1 at least
  
  ## `unsafe` Review
  
  No direct `unsafe` usage and has `#[forbid(unsafe_code)]`, so nothing to cover
  here :)
  
  * [ ] Directly uses `unsafe`?
  * [ ] Passes `miri` if using `unsafe`?
  
  ## General Review
  
  Everything seems very thought out, tradeoffs are noted in comments, and the
  crate is pedantic about corretness. What's not to love?
----- SIGN CREV PROOF -----
kRoEIcWBPGcxz9qVqiraXCt3Ht_lXmTQwwZaQTldOHz7HBV_hb15Q0XzMInUGGTELvGL1saGCTBgXnxKHg-bBA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: 2023-02-16T12:41:16.088346155-07:00
from:
  id-type: crev
  id: PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ
  url: https://github.com/LovecraftianHorror/crev-proofs
package:
  source: https://crates.io
  name: slab
  version: 0.4.7
  revision: 817a2ec227e819f308e8e4d0487084940b4ef831
  digest: CX1LHiDn_y7XctrPQOLRkABxehiooi_biXcdHh7Qjq4
review:
  thoroughness: high
  understanding: high
  rating: strong
alternatives:
- source: https://crates.io
  name: slotmap
comment: |-
  ## Fundamental
  
  * [x] Well maintained?
    * Maintained by the Tokio project
  * [x] Well documented?
  * [x] Sane dep tree?
    * Build dependency on `autocfg` and optional dependency on `serde` :)
  * [x] Good test coverage?
    * Good when including the unstable `--doctests` option
    * 90.7% line coverage with `cargo +nightly llvm-cov --doctests`
  * [x] Tests are passing?
  * [x] `cargo audit` is happy?
  
  ## Nice to have
  
  * [x] `cargo check` is happy?
  * [x] `rustfmt` is happy?
  * [x] `clippy` is happy?
    * Happy on 1.66.1 at least
  * [x] No outdated deps?
  
  ## Build scripts
  
  * [x] Build script(s) seem sane?
    * Only used to gate off `cfg`s for different rust versions
  
  ## `unsafe` Review
  
  * [x] Directly uses `unsafe`?
  * [x] Passes `miri` if using `unsafe`?
    * `unsafe` methods are tested and this is enforced with CI
  
  Only uses `unsafe` to expose three unsafe methods on `Slab`
  
  `Slab::get_unchecked()` is just an analog to `[T]::get_unchecked()` and
  internally calls `[T]::get_unchecked()` on the underlying vector. The caller
  MUST call this method on an occupied entry within the bounds of the underlying
  vector. Calling it outside of bounds is undefined behavior while calling it on
  a `Vacant` entry will panic (hits `unreachable!()`) although this may be
  relaxed to `unreachable_unchecked()` in the future a la
  https://github.com/tokio-rs/slab/issues/40
  
  `Slab::get_unchecked_mut()` is the same situation as `Slab::get_unchecked()`.
  Also an analog of the slice method and also the same UB and panic behavior
  
  `Slab::get2_unchecked_mut()` provides a way to get a mutable reference to two
  elements in the `Slab` without bounds checking. This has the same invariants
  as the other two (UB if out of range and panics on `Vacant` entries) along
  with the additional invariant that the two elements have to be different to
  prevent multiple mutable references to the same element. The last invariant is
  enforced with a debug assert. Because there is no analog for slices this
  manually implements the addressing in a similar way to
  `[T]::get_unchecked_mut()` although it would be nice to have a debug assert
  that the indices are in range (the standard library uses
  `assert_unsafe_precondition!()` to do this on `[T]::get_unchecked()` and
  `[T]::get_unchecked_mut()` which gets picked up by `cargo-careful`)
  
  ## General Review
  
  `lib.rs`
  
  Essentially a `Vec` where removed elements get replaced by a vacant entry
  marker instead of shifting down all later values to compact. All vacant
  entries store an index pointing to some other vacant entry with the last
  vacant entry pointing to the end of the `Slab`. The `Slab` itself then stores
  a `next` value pointing to the top of the stack so that it can keep track of
  where all vacant entries are to efficiently push on new values. These
  underlying entries are never publicly exposed to prevent users from mangling
  this stack
  
  Overall everything looks good. The `Slab` seems to correctly maintain its
  invariants at all times and there is a nice sprinkling of asserts and debug
  asserts to handle sanity checking
  
  `serde.rs`
  
  Contains the optional `serde::{Serialize, Deserialize}` impls for `Slab`. It
  just (de)serializes as a map with the deserialization performing the same
  operations as the `FromIterator` implementation
----- SIGN CREV PROOF -----
ayYpQeyL7AgmJwCuZhmRY0JTXiyWpNlJ73aH67siI_tRI-Ni_TUjU0rA1hItPAO9B45u0C7AjlXJJ4U4absDAA
----- END CREV PROOF -----

